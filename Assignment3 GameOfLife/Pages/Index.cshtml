@page
@model GameModel
@{
}

<h1 style="text-align:center">Conway's Game of Life</h1>
@*How to present the game board?*@
<p></p>
<div id="gameboarddiv"></div>
<!-- Javascript code for creating table to be displayed as game board-->
<script>
    //gameboard vals for state of the board
    var gameboard = '';
    var gameboardsize = 40;

    var clickedVals = [];
    var stringVals = '';

    var gamestart = true;
    var mousedown = false;
    var socket;

    //game colors
    var gbcolor = "rgb(213, 232, 231)";
    var gbcolorchange = "rgb(206, 215, 65)";

    //use loop to create table based on size defined earlier
    for (var rows = 0; rows < gameboardsize; rows++) {

        gameboard += '<tr>';
        //create table rows and columns and assign id based on position to each cell
        //example - first row will be 00 01 02, and row two will be 10 11 12 etc.
        for (var cols = 0; cols < gameboardsize; cols++) {
            var id = (rows * gameboardsize) + cols;
            gameboard += '<td style="background-color: ' + gbcolor + ';" onmousedown="clickedCell(id)" onmouseover="mouseOver(id)"'
                + 'width = 20 height= 20 id= ' + id.toString() + '></td > ';

        }
        gameboard += '</tr>';
    }

    //display gameboard on page
    document.getElementById("gameboarddiv").innerHTML =
        '<table id="gametable" border=1 align=center onmouseup="mouseUp()">' + gameboard + '</table>';

    //define a function for a clicked cell event
    //should be able to toggle in-case user wishes to deselect cell
    function clickedCell(id) {
        mousedown = true;
        gamestart = false;

        //if color is original color change it, else change it back to original color
        //if cell is changed/ is an active cell, push the value to the array
        //if cell is changed back, strip the value from the array
        if (document.getElementById(id).style.backgroundColor == gbcolor) {
            document.getElementById(id).style.backgroundColor = gbcolorchange;
        }//only allow them to toggle if game is in stop mode
        else {
            document.getElementById(id).style.backgroundColor = gbcolor;
        }

        clickedVals.push(id);

        if (gamestart && !mousedown) {
            sendVals();
        }
    }

    function mouseUp() {
        mousedown = false;
        gamestart = true;
        sendVals();
    }

    function mouseOver(id) {
        if (mousedown) {
            clickedCell(id);

        }
    }

    //send most recent values to backend
    function sendVals() {
        if (clickedVals.length > 0) {
            stringVals = clickedVals.toString();
            send(stringVals);
            clickedVals = [];
        }
    }

    //Game start and stop func
    function start() {
        gamestart = true;
        sendVals();
        gameInfo();
    }

    function stop() {
        gamestart = false;
        gameInfo();
    }

    function gameInfo() {
        if (gamestart == true) {
            document.getElementById("GameInfo").innerHTML = "Game is in play..";

        }
        else {
            document.getElementById("GameInfo").innerHTML = "Game is paused";
        }
    }

    //Game load func
    function load(data) {

        var activeCells = data.split(",");
        if (activeCells.length != 0) {
            for (var i = 0; i < gameboardsize * gameboardsize; i++) {
                if (!activeCells.includes(i.toString())) {
                    document.getElementById(i.toString()).style.backgroundColor = gbcolor;
                }
                else {
                    document.getElementById(i.toString()).style.backgroundColor = gbcolorchange;
                }
            }
        }
    }

    function connect() {
        socket = new WebSocket("ws://" + window.location.host + "/GOLsocket");
        socket.onopen = function (event) {
            console.log("Socket Connected.");
        }
        socket.onclose = function (event) {
            var reason;

            if (event.code == 1000)
                reason = "Normal closure, meaning that the purpose for which the connection was established has been fulfilled.";
            else if (event.code == 1001)
                reason = "An endpoint is \"going away\", such as a server going down or a browser having navigated away from a page.";
            else if (event.code == 1002)
                reason = "An endpoint is terminating the connection due to a protocol error";
            else if (event.code == 1003)
                reason = "An endpoint is terminating the connection because it has received a type of data it cannot accept (e.g., an endpoint that understands only text data MAY send this if it receives a binary message).";
            else if (event.code == 1004)
                reason = "Reserved. The specific meaning might be defined in the future.";
            else if (event.code == 1005)
                reason = "No status code was actually present.";
            else if (event.code == 1006)
                reason = "The connection was closed abnormally, e.g., without sending or receiving a Close control frame";
            else if (event.code == 1007)
                reason = "An endpoint is terminating the connection because it has received data within a message that was not consistent with the type of the message (e.g., non-UTF-8 [http://tools.ietf.org/html/rfc3629] data within a text message).";
            else if (event.code == 1008)
                reason = "An endpoint is terminating the connection because it has received a message that \"violates its policy\". This reason is given either if there is no other sutible reason, or if there is a need to hide specific details about the policy.";
            else if (event.code == 1009)
                reason = "An endpoint is terminating the connection because it has received a message that is too big for it to process.";
            else if (event.code == 1010) // Note that this status code is not used by the server, because it can fail the WebSocket handshake instead.
                reason = "An endpoint (client) is terminating the connection because it has expected the server to negotiate one or more extension, but the server didn't return them in the response message of the WebSocket handshake. <br /> Specifically, the extensions that are needed are: " + event.reason;
            else if (event.code == 1011)
                reason = "A server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request.";
            else if (event.code == 1015)
                reason = "The connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can't be verified).";
            else
                reason = "Unknown reason";

            console.log(reason);
        }
        socket.onmessage = function (event) {
            console.log(event.data);
            if (gamestart == true) {
                if (event.data === "") {

                    console.log("Where's the data?");
                }
                load(event.data);
            }
        }
        socket.onerror = function (event) {
            console.log("Error: ", event);

        }
    }

    function send(message) {
        console.log(message);
        socket.send(message);
    }

    connect();

</script>

<button type="button" onclick="start()">Start</button>
<button type="button" onclick="stop()">Stop</button>
<p id="GameInfo">Game is in play..</p>
<p id="GameRules">
    <b>For a space that is 'populated':</b>
    Each cell with one or no neighbors dies, as if by solitude.<br />
    Each cell with four our more neigbors dies, as if
    by overpopulation.<br />
    Each cell with two or three neighbors survives.<br />
    <b>For a space that is 'empty' or 'unpopulated'</b><br />
    Each cell with three neighbors becomes populated.
</p>